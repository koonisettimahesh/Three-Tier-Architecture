project2 - Three tier architecture

step 1: Launch 3 instances ubuntu linux
        Frontend
        Backend
        Database
step 2: create a database in rds with the following things
        1.choose a database creation method -> Standard create
        2.Engine type -> mysql/mariadb
        3.Engine version -> New version
        4.Templates -> Free tier/sandbox
        5.Availability and durability -> Single-AZ DB instance deployment (1 instance)
        6.DB instance identifier -> identifierName
        7.Master username -> admin
        8.Master Password -> password
        9.Storage type -> ssd,allocated storage (amount of storage required the project)
        connectivity 
        Don't connect to an EC2 compute resource
        public access-NO
        10.Click on create database
 step3:Add security groups for each server 
        frontend-80,22
        backend-80,22,3306
        database-22,3306
        rds-all traffic,3306
 step4: In Frontend server
        sudo su
        apt update
        apt install apache2 -y
        systemctl start apache2
        systemctl enable apache2
        systemctl status apache2
        chmod 777 /var/www/html
        ->change the index.html file in that path to login form html file
        vim /var/www/html/index.html
        code:
        
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Login & Signup</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding-top: 50px;
            background-color: #f4f4f4;
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin: 10px;
            width: 300px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        input, button {
            width: 100%;
            padding: 10px;
            margin-top: 10px;
        }
        button {
            background-color: #007BFF;
            color: white;
            border: none;
        }
        p {
            margin-top: 10px;
        }
    </style>
</head>
<body>

<div class="container">
    <h2>Signup</h2>
    <input type="text" id="signup-username" placeholder="Username" required />
    <input type="password" id="signup-password" placeholder="Password" required />
    <button onclick="signup()">Signup</button>
    <p id="signup-message"></p>
</div>

<div class="container">
    <h2>Login</h2>
    <input type="text" id="login-username" placeholder="Username" required />
    <input type="password" id="login-password" placeholder="Password" required />
    <button onclick="login()">Login</button>
    <p id="login-message"></p>
</div>

<script>
    const backendUrl = 'http://34.227.80.200';

    function signup() {
        const username = document.getElementById("signup-username").value;
        const password = document.getElementById("signup-password").value;

        fetch(`${backendUrl}/signup.php`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, password })
        })
        .then(res => res.json())
        .then(data => {
            document.getElementById("signup-message").textContent = data.message;
        })
        .catch(err => {
            document.getElementById("signup-message").textContent = "Signup failed";
        });
    }

    function login() {
        const username = document.getElementById("login-username").value;
        const password = document.getElementById("login-password").value;

        fetch(`${backendUrl}/login.php`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, password })
        })
        .then(res => res.json())
        .then(data => {
            document.getElementById("login-message").textContent = data.message;
        })
        .catch(err => {
            document.getElementById("login-message").textContent = "Login failed";
        });
    }
</script>
</body>
</html>


step 5:In Backend
        sudo su
        apt update
        apt install apache2 -y
        systemctl start apache2
        systemctl enable apache2
        systemctl status apache2
        chmod 777 /var/www/html
        apt install php libapache2-mod-php php-mysql -y
        php -v
        ls /etc/apache2/mods-available/ | grep php
        echo "<?php phpinfo(); ?>" | sudo tee /var/www/html/info.php
        --change the file /var/www/html to php files for backend
<!-- db.php -->
<?php
$host = 'database-1.cbwoguuagar2.us-east-1.rds.amazonaws.com';
$dbname = 'user_db';
$username = 'admin';
$password = 'password';

$conn = new mysqli($host, $username, $password, $dbname);

if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}
?>
<!--login.php-->

<?php
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Headers: Content-Type");
header("Content-Type: application/json");

include 'db.php';

// Get raw JSON input
$data = json_decode(file_get_contents("php://input"));

if (!empty($data->username) && !empty($data->password)) {
    $username = $data->username;
    $password = $data->password;

    $stmt = $conn->prepare("SELECT password FROM users WHERE username = ?");
    $stmt->bind_param("s", $username);
    $stmt->execute();

    $stmt->store_result();

    if ($stmt->num_rows > 0) {
        $stmt->bind_result($hashedPassword);
        $stmt->fetch();

        if (password_verify($password, $hashedPassword)) {
            echo json_encode(["message" => "Login successful"]);
        } else {
            echo json_encode(["message" => "Invalid credentials"]);
        }
    } else {
        echo json_encode(["message" => "User not found"]);
    }

    $stmt->close();
} else {
    echo json_encode(["message" => "Invalid input"]);
}

$conn->close();
?>

<!-- signup.php -->
<?php
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Headers: Content-Type");
header("Content-Type: application/json");

include 'db.php';

$data = json_decode(file_get_contents("php://input"));

if (!empty($data->username) && !empty($data->password)) {
    $username = $data->username;
    $password = password_hash($data->password, PASSWORD_BCRYPT);

    $stmt = $conn->prepare("INSERT INTO users (username, password) VALUES (?, ?)");
    $stmt->bind_param("ss", $username, $password);

    if ($stmt->execute()) {
        echo json_encode(["message" => "Signup successful"]);
    } else {
        if ($conn->errno === 1062) { // Duplicate entry
            echo json_encode(["message" => "Username already exists"]);
        } else {
            echo json_encode(["message" => "Database error: " . $conn->error]);
        }
    }

    $stmt->close();
} else {
    echo json_encode(["message" => "Invalid input"]);
}

$conn->close();
?>

step 6: In DataBase
        sudo su
        apt update
        apt install mysql-client -y
        mysql --version
        mysql -h database-1.cbwoguuagar2.us-east-1.rds.amazonaws.com -P 3306 -u admin -p
        show databases;
        create database user_db;
        use user_db;
        show tables;
        CREATE TABLE users (
    	id INT AUTO_INCREMENT PRIMARY KEY,
  	username VARCHAR(50) UNIQUE NOT NULL,
 	 password VARCHAR(255) NOT NULL
        );
        show tables;
        select * from users;
step 7: systemctl restart apache2 in frontend 
step 8: try signup and login in the frontend and verify the database in database server


